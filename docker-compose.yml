version: "3"

services:
  frontend:
    env_file: .env
    container_name: frontend
    build:
      context: game/frontend
    user: root
    volumes:
      - ./game/frontend/src:/usr/share/nginx/html
      - ./game/frontend/nginx.conf.template:/nginx.conf.template
    restart: always
    networks:
      - network
    depends_on:
      - backend
    expose:
      - 4242
  backend:
    env_file: .env
    container_name: backend
    user: 1000:1000
    build: 
      context: game/backend
    volumes:
      - ./game/backend:/code
    networks:
      - network
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    expose:
      - 6969
  oauth2intra:
    env_file: .env
    container_name: oauth2
    user: 1000:1000
    build: 
      context: oauth2intra
    volumes:
      - ./oauth2intra:/code
    networks:
      - network
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    expose:
      - 8000
  nginx:
    env_file: .env
    container_name: nginx
    build:
      context: nginx
      args:
        CURRENT_HOST: ${CURRENT_HOST}
    user: root
    volumes:
      - ./nginx/root:/usr/share/nginx/html
      - ./nginx/nginx.conf.template:/nginx.conf.template
      - ./.ssl/:/etc/nginx/ssl/
    ports:
      - 80:80
      - 443:443
    restart: always
    networks:
      - network
    depends_on:
      - postgres
      - oauth2intra
  postgres:
    container_name: postgres
    build:
      context: postgres
    env_file: .env
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 1s
      timeout: 5s
      retries: 10
      start_period: 30s
    networks:
      - network
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    expose:
      - 5432

volumes:
  postgres_data:

networks:
  network:
    driver: bridge
