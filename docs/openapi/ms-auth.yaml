openapi: 3.0.2
info:
  title: auth REST API
  version: '1.0.17'
  description: |
    REST API Documentation for ft_transcendence.
    Under heavy development. Expect breaking changes.

servers:
  - url: https://localhost/user
  - url: https://playpong.duckdns.org/user

paths:
  /:
    get:
      tags:
        - Status
      summary: Check Heartbeat Status
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Service is up and running
        '401':
          description: Missing or invalid JWT token'
        '503':
          description: Service is down or unhealthy
  /register:
    post:
      tags:
        - Account
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Successful registration
          headers:
            Set-Cookie:
              schema:
                type: string
                example: jwt_token=eyJhbGciOiJIUzICJ9.eyJ1c2VyShdg5MH0.abcdeuvwxyz; HttpOnly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request (e.g., email or username already taken, or password too weak)
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Internal server error
  /login:
    post:
      tags:
        - Account
      summary: Regular Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful Login
          headers:
            Set-Cookie:
              schema:
                type: string
                example: jwt_token=eyJhbGciOiJIUzICJ9.eyJ1c2VyShdg5MH0.abcdeuvwxyz; HttpOnly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Credentials are wrong
        '404':
          description: User not found
        '500':
          description: Internal server error
  /logout:
    post:
      tags:
        - Account
      summary: Logout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful Logout (Token Deleted)
          headers:
            Set-Cookie:
              schema:
                type: string
                example: jwt_token=; Max-Age=0; HttpOnly
        '404':
          description: Token does not exist
        '500':
          description: Internal server error
  /oauth2/login:
    get:
      tags:
        - Authentication
      summary: Intra42 Login
      responses:
        '200':
          description: Successful OAuth2 Login
          headers:
            Set-Cookie:
              schema:
                type: string
                example: jwt_token=eyJhbGciOiJIUzICJ9.eyJ1c2VyShdg5MH0.abcdeuvwxyz; HttpOnly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '302':
          description: Redirect to OAuth2 Provider
          headers:
            Location:
              schema:
                type: string
                example: https://example.com/oauth2/authorize
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthError'
        '500':
          description: Internal server error
  /token:
    get:
      tags:
        - User
      summary: Get JWT Token Payload
      description: Decodes the JWT token and returns the payload. 'sub' is the user ID.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenPayload'
        '401':
          description: Missing or invalid JWT token
        '500':
          description: Error decoding JWT token
  /token/existence:
    get:
      tags:
        - Status
      summary: Check if Token Exists
      description: Checking if the JWT is stored in the cookie with the name 'jwt_token'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token exists
        '404':
          description: Token does not exist
        '401':
          description: Missing or invalid JWT token
  /{userId}username:
    get:
      tags:
        - User
      summary: Get Username
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
              example: "username"
        '404':
          description: User not found
        '401':
          description: Missing or invalid JWT token
    put:
      tags:
        - User
      summary: Update Username
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
        '404':
          description: User not found
        '401':
          description: Missing or invalid JWT token
  /{userId}/avatarUrl:
    get:
      tags:
        - User
      summary: Get Avatar URL
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                example: "https://example.com/avatar.jpg"
        '401':
          description: Missing or invalid JWT token
    put:
      tags:
        - User
      summary: Update Avatar URL
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                avatarUrl:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  avatarUrl:
                    type: string
        '401':
          description: Missing or invalid JWT token

# COMPONENTS
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required:
        - username
        - password
        - email
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    AuthResponse:
      type: object
      required:
        - userId
      properties:
        userId:
          type: string
        jwt_token:
          type: string
          nullable: true
          description: |
            If this property is null, the user needs to log in again through the Auth microservice to get a new token.
    OAuthError:
        type: object
        properties:
          error:
            type: string
            description: Error message (e.g., "Invalid OAuth2 credentials", "OAuth2 provider error")
    TokenPayload:
      type: object
      description: Decoded JWT token payload.
      properties:
        sub:
          type: string
          description: Subject (user ID)
        exp:
          type: integer
          description: Expiration timestamp
        amr:
          type: array
          items:
            type: string
          description: Authentication methods references
      example:
        sub: "1"
        exp: 1672531200
        amr: ["password", "oauth2", "2fa"]