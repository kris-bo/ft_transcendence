openapi: 3.0.2
info:
  title: auth REST API
  version: '1.6.1'

  description: |
    REST API Documentation for ft_transcendence.
    Under heavy development - expect breaking changes.

servers:
  - url: https://localhost/user
  - url: https://playpong.duckdns.org/user

tags:
  - name: Status
  - name: Account
  - name: 2FA
  - name: User Data

paths:
  /status:
    get:
      tags:
        - Status
      summary: Check Heartbeat Status
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Service is up and running
          content:
            application/json:
              example: {"message": "Service is up and running"}
        '401':
          description: Missing or invalid JWT token
          content:
            application/json:
              example: {"message": "Missing or invalid JWT token"}
        '503':
          description: Service is down or unhealthy
          content:
            application/json:
              example: {"message": "Service is down or unhealthy"}
  /register:
    post:
      tags:
        - Account
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Successful registration
          headers:
            Set-Cookie:
              schema:
                type: string
                example: jwt_token=eyJhbGciOiJIUzICJ9.eyJ1c2VyShdg5MH0.abcdeuvwxyz; HttpOnly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '409':
          description: e.g., email or username already taken, or password too weak
          content:
            application/json:
              example: {"message": "Username already taken"}
        '500':
          description: Internal server error
          content:
            application/json:
              example: {"message": "Server Error"}
  /login:
    post:
      tags:
        - Account
      summary: Regular Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful Login
          headers:
            Set-Cookie:
              schema:
                type: string
                example: jwt_token=eyJhbGciOiJIUzICJ9.eyJ1c2VyShdg5MH0.abcdeuvwxyz; HttpOnly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: 2fa verficication required
          content:
            application/json:
              example: {"user_id": 1, "2fa": true}
        '409':
          description: Credentials are wrong
          content:
            application/json:
              example: {"message": "Credentials are wrong"}
        '404':
          description: User not found
          content:
            application/json:
              example: {"message": "User not found"}
        '500':
          description: Internal server error
          content:
            application/json:
              example: {"message": "Server Error"}
  /logout:
    post:
      tags:
        - Account
      summary: Logout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful Logout (Token Deleted)
          headers:
            Set-Cookie:
              schema:
                type: string
                example: jwt_token=; Max-Age=0; HttpOnly
          content:
            application/json:
              example: {"message": "Successful Logout (Token Deleted)"}
        '404':
          description: Token does not exist
          content:
            application/json:
              example: {"message": "Token does not exist"}
        '500':
          description: Internal server error
          content:
            application/json:
              example: {"message": "Server Error"}
  /oauth2/login:
    get:
      tags:
        - Account
      summary: Intra42 Login
      responses:
        '200':
          description: Successful OAuth2 Login
          headers:
            Set-Cookie:
              schema:
                type: string
                example: jwt_token=eyJhbGciOiJIUzICJ9.eyJ1c2VyShdg5MH0.abcdeuvwxyz; HttpOnly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '302':
          description: Redirect to OAuth2 Provider
          headers:
            Location:
              schema:
                type: string
                example: https://example.com/oauth2/authorize
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthError'
        '500':
          description: Internal server error
          content:
            application/json:
              example: {"message": "Server Error"}
  /token:
    get:
      tags:
        - User Data
      summary: Get JWT Token Payload
      description: Decodes the JWT token and returns the payload. 'sub' is the user ID.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenPayload'
        '401':
          description: Missing or invalid JWT token
          content:
            application/json:
              example: {"message": "Missing or invalid JWT token"}
        '500':
          description: Error decoding JWT token
          content:
            application/json:
              example: {"message": "Server Error"}
  /token/existence:
    get:
      tags:
        - Status
      summary: Check if Token Exists
      description: Checking if the JWT is stored in the cookie with the name 'jwt_token'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token exists
          content:
            application/json:
              example: {"message": "Token exists"}
        '404':
          description: Token does not exist
          content:
            application/json:
              example: {"message": "Token does not exist"}
        '401':
          description: invalid JWT token
          content:
            application/json:
              example: {"message": "invalid JWT token"}
        '500':
          description: Internal server error
          content:
            application/json:
              example: {"message": "Server Error"}
  /avatar:
    get:
      tags:
        - User Data
      summary: Get Avatar
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              example: {"message": "moon-dog.jpg"}
        '401':
          description: Missing or invalid JWT token
          content:
            application/json:
              example: {"message": "Missing or invalid JWT token"}
        '500':
          description: Internal server error
          content:
            application/json:
              example: {"message": "Server Error"}
    put:
      tags:
        - User Data
      summary: Update Avatar
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                avatar:
                  type: string
      responses:
        '200':
          description: Avatar updated successfully
          content:
            application/json:
              example: {"message": "Avatar updated successfully"}
        '401':
          description: Missing or invalid JWT token
          content:
            application/json:
              example: {"message": "Missing or invalid JWT token"}
        '409':
          description: updating value failed
          content:
            application/json:
              example: {"message": "updating value failed"}
        '500':
          description: Internal server error
          content:
            application/json:
              example: {"message": "Server Error"}
  /2fa/update:
    put:
      tags:
        - 2FA
      summary: update 2fa setting
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/second_factor_request'
      responses:
        '200':
          description: OK
          content:
            application/json:
              example: {"message": "2fa setting updated"}
        '401':
          description: Missing or invalid JWT token
          content:
            application/json:
              example: {"message": "Missing or invalid JWT token"}
        '409':
          description: updating value failed
          content:
            application/json:
              example: {"message": "updating value failed"}
        '500':
          description: Internal server error
          content:
            application/json:
              example: {"message": "Server Error"}
  /2fa/verify:
    post:
      tags:
        - 2FA
      summary: send 2fa code for verification
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - code
              properties:
                user_id:
                  type: integer
                code:
                  type: string
            example: {"user_id": 1, "code": "123456"}
      responses:
        '200':
          description: OK
          content:
            application/json:
              example: {"message": "2fa setting updated"}
        '401':
          description: Missing or invalid JWT token
          content:
            application/json:
              example: {"message": "Wrong code"}
        '409':
          description: updating value failed
          content:
            application/json:
              example: {"message": "updating value failed"}
        '500':
          description: Internal server error
          content:
            application/json:
              example: {"message": "Server Error"}

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required:
        - username
        - password
        - email
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    second_factor_request:
      type: object
      properties:
        second_factor:
          type: boolean
          description: true if 2fa is enabled, false if disabled
          example: true
    AuthResponse:
      type: object
      required:
        - user_id
        - username
        - 2fa
      properties:
        user_id:
          type: string
        username:
          type: string
        2fa:
          type: boolean
          example: false
    OAuthError:
        type: object
        properties:
          error:
            type: string
            description: Error message (e.g., "Invalid OAuth2 credentials", "OAuth2 provider error")
    TokenPayload:
      type: object
      description: Decoded JWT token payload.
      properties:
        sub:
          type: string
          description: Subject (user ID)
        exp:
          type: integer
          description: Expiration timestamp
        amr:
          type: array
          items:
            type: string
          description: Authentication methods references
      example:
        sub: "1"
        exp: 1672531200
        amr: ["password", "oauth2", "2fa"]
