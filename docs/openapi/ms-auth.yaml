openapi: 3.0.2
info:
  title: auth REST API
  version: '1.9.1'

  description: |
    REST API Documentation for ft_transcendence.
    Under heavy development - expect breaking changes.

servers:
  - url: https://localhost
  - url: https://playpong.duckdns.org

tags:
  - name: Status
  - name: Account
  - name: 2FA
  - name: Token
  - name: Avatar

paths:
  /user/status:
    get:
      tags:
        - Status
      summary: Check Heartbeat Status
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Service is up and running
          content:
            application/json:
              example: {"message": "Service is up and running"}
        '401':
          description: Missing or invalid JWT token
          content:
            application/json:
              example: {"message": "Missing or invalid JWT token"}
        '503':
          description: Service is down or unhealthy
          content:
            application/json:
              example: {"message": "Service is down or unhealthy"}
  /user/register:
    post:
      tags:
        - Account
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Successful registration
          headers:
            Set-Cookie:
              schema:
                type: string
                example: jwt_token=eyJhbGciOiJIUzICJ9.eyJ1c2VyShdg5MH0.abcdeuvwxyz; HttpOnly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request
          content:
            application/json:
              examples:
                email_invalid:
                  value: {"message": "Email invalid"}
        '409':
          description: e.g., email or username already taken
          content:
            application/json:
              examples:
                email_taken:
                  value: {"message": "Email already taken"}
                username_taken:
                  value: {"message": "Username already taken"}
        '500':
          description: Internal server error
          content:
            application/json:
              example: {"message": "Server Error"}
  /user/login:
    post:
      tags:
        - Account
      summary: Regular Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful Login
          headers:
            Set-Cookie:
              schema:
                type: string
                example: jwt_token=eyJhbGciOiJIUzICJ9.eyJ1c2VyShdg5MH0.abcdeuvwxyz; HttpOnly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: 2fa verification necessary
          content:
            application/json:
              example: {"user_id": 1, "second_factor": true}
        '409':
          description: Credentials are wrong
          content:
            application/json:
              example: {"message": "Credentials are wrong"}
        '404':
          description: User not found
          content:
            application/json:
              example: {"message": "User not found"}
        '500':
          description: Internal server error
          content:
            application/json:
              example: {"message": "Server Error"}
  /user/logout:
    post:
      tags:
        - Account
      summary: Logout
      responses:
        '200':
          description: Successful Logout (Token Deleted)
          headers:
            Set-Cookie:
              schema:
                type: string
                description: jwt_token cookie is deleted
                example: jwt_token=; Max-Age=0; HttpOnly
          content:
            application/json:
              examples:
                user_logged_out:
                  value: {"message": "User successfully logged out"}
                user_not_logged_in:
                  value: {"message": "User was not logged in"}
        '500':
          description: Internal server error
          content:
            application/json:
              example: {"message": "Server Error"}
  /user/oauth2/login:
    get:
      tags:
        - Account
      summary: Intra42 Login
      responses:
        '200':
          description: Successful OAuth2 Login
          headers:
            Set-Cookie:
              schema:
                type: string
                example: jwt_token=eyJhbGciOiJIUzICJ9.eyJ1c2VyShdg5MH0.abcdeuvwxyz; HttpOnly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '302':
          description: Redirect to OAuth2 Provider
          headers:
            Location:
              schema:
                type: string
                example: https://example.com/oauth2/authorize
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthError'
        '500':
          description: Internal server error
          content:
            application/json:
              example: {"message": "Server Error"}
  /user/token:
    get:
      tags:
        - Token
      summary: Get JWT Token Payload
      description: Decodes the JWT token and returns the payload. 'sub' is the user ID.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenPayload'
        '401':
          description: Missing or invalid JWT token
          content:
            application/json:
              example: {"message": "Missing or invalid JWT token"}
        '500':
          description: Internal server error
          content:
            application/json:
              example: {"message": "Server Error"}
  /user/token/existence:
    get:
      tags:
        - Token
      summary: Check if Token Exists
      description: Checking if the JWT is stored in the cookie with the name 'jwt_token'
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Token exists
          content:
            application/json:
              example: {"message": "Token exists"}
        '404':
          description: Token does not exist
          content:
            application/json:
              example: {"message": "Token does not exist"}
        '401':
          description: invalid JWT token
          content:
            application/json:
              example: {"message": "invalid JWT token"}
        '500':
          description: Internal server error
          content:
            application/json:
              example: {"message": "Server Error"}
  /user/avatar:
    get:
      tags:
        - Avatar
      summary: Get Avatar
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              example: {"message": "moon-dog.jpg"}
        '401':
          description: Missing or invalid JWT token
          content:
            application/json:
              example: {"message": "Missing or invalid JWT token"}
        '500':
          description: Internal server error
          content:
            application/json:
              example: {"message": "Server Error"}
    put:
      tags:
        - Avatar
      summary: Update Avatar
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                avatar:
                  type: string
                  example: "moonDog.jpg"
      responses:
        '200':
          description: Avatar updated successfully
          content:
            application/json:
              example: {"message": "Avatar updated successfully"}
        '401':
          description: Missing or invalid JWT token
          content:
            application/json:
              example: {"message": "Missing or invalid JWT token"}
        '409':
          description: updating value failed
          content:
            application/json:
              example: {"message": "updating value failed"}
        '500':
          description: Internal server error
          content:
            application/json:
              example: {"message": "Server Error"}
  /user/2fa:
    post:
      tags:
        - 2FA
      summary: generate 2fa code
      description: |
        - Code must be exact 6 random digits.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
        '401':
          description: Missing or invalid JWT token
        '404':
          description: User not found
        '500':
          description: Internal server error
          content:
            application/json:
              example: {"message": "Verification failed"}
    get:
      tags:
        - 2FA
      summary: get 2fa status
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              example: {"second_factor": false}
        '401':
          description: Missing or invalid JWT token
        '404':
          description: User not found
        '500':
          description: Internal server error
          content:
            application/json:
              example: {"message": "Server Error"}
    put:
      tags:
        - 2FA
      summary: activate 2fa
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - code
              properties:
                code:
                  type: string
            example: {"code": "163907"}
      responses:
        '200':
          description: 2fa activated
        '401':
          description: Verification failed
          content:
            application/json:
              examples:
                invalid_code:
                  value: {"message": "Invalid code"}
                rate_limit_exceeded:
                  value: {"message": "Rate limit exceeded"}
                code_expired:
                  value: {"message": "Code expired"}
                invalid_jwt_token:
                  value: {"message": "Missing or invalid JWT token"}
        '404':
          description: User not found
        '500':
          description: Internal server error
          content:
            application/json:
              example: {"message": "Server Error"}
    delete:
      tags:
        - 2FA
      summary: deactivate 2fa
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - code
              properties:
                code:
                  type: string
            example: {"code": "163907"}
      responses:
        '200':
          description: 2fa deactivated
        '401':
          description: Verification failed
          content:
            application/json:
              examples:
                invalid_code:
                  value: {"message": "Invalid code"}
                rate_limit_exceeded:
                  value: {"message": "Rate limit exceeded"}
                code_expired:
                  value: {"message": "Code expired"}
                invalid_jwt_token:
                  value: {"message": "Missing or invalid JWT token"}
        '404':
          description: User not found
        '500':
          description: Internal server error
          content:
            application/json:
              example: {"message": "Server Error"}
  /user/2fa/verify:
    post:
      tags:
        - 2FA
      summary: verify code
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - user_id
                - code
              properties:
                user_id:
                  type: integer
                code:
                  type: string
            example: {"user_id": 1, "code": "163907"}
      responses:
        '200':
          description: 2fa verified
          headers:
            Set-Cookie:
              schema:
                type: string
                example: jwt_token=eyJhbGciOiJIUzICJ9.eyJ1c2VyShdg5MH0.abcdeuvwxyz; HttpOnly
        '401':
          description: Verification failed
          content:
            application/json:
              examples:
                invalid_code:
                  value: {"message": "Invalid code"}
                rate_limit_exceeded:
                  value: {"message": "Rate limit exceeded"}
                code_expired:
                  value: {"message": "Code expired"}
                invalid_jwt_token:
                  value: {"message": "Missing or invalid JWT token"}
        '409':
          description: 2fa not activated
        '404':
          description: User not found
        '500':
          description: Internal server error
          content:
            application/json:
              example: {"message": "Verification failed"}
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterRequest:
      type: object
      required:
        - username
        - password
        - email
      properties:
        username:
          type: string
          example: "guest"
        password:
          type: string
          example: "123"
        email:
          type: string
          example: "guest@gmail.com"
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: "guest"
        password:
          type: string
          example: "123"
    AuthResponse:
      type: object
      required:
        - user_id
        - username
        - second_factor
      properties:
        user_id:
          type: string
        username:
          type: string
        second_factor:
          type: boolean
          example: false
    OAuthError:
        type: object
        properties:
          message:
            type: string
            description: Error message (e.g., "Invalid OAuth2 credentials", "OAuth2 provider error")
    TokenPayload:
      type: object
      description: Decoded JWT token payload.
      properties:
        sub:
          type: string
          description: Subject (user ID)
        exp:
          type: integer
          description: Expiration timestamp
      example:
        sub: "1"
        exp: 1672531200
