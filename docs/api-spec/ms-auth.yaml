openapi: 3.0.2
info:
  title: ft_transcendence-auth REST API
  version: '0.3'
  description: |
    This API is used for authentication and user profile management.
    Version 0.3 includes improved details and added endpoints for username.

tags:
  - name: Authentication
    description: Endpoints related to user authentication
  - name: User
    description: Endpoints related to user data and profile

servers:
  - url: https://{hostname}

paths:
  /user/login:
    post:
      tags:
        - Authentication
      summary: Regular Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful Login
          headers:
            Set-Cookie:
              schema:
                type: string
                example: jwt_token=eyJhbGciOiJIUzICJ9.eyJ1c2VyShdg5MH0.abcdeuvwxyz; HttpOnly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Missing or invalid JWT token
  /user/oauth2/login:
    get:
      tags:
        - Authentication
      summary: Intra42 Login
      responses:
        '200':
          description: Successful OAuth2 Login
          headers:
            Set-Cookie:
              schema:
                type: string
                example: jwt_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIxMjM0NTY3OCIsImlhdCI6MTYyNDU2Nzg5MH0.abcdefghijklmnopqrstuvwxyz; HttpOnly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '302':
          description: Redirect to OAuth2 Provider
          headers:
            Location:
              schema:
                type: string
                example: https://example.com/oauth2/authorize
  /user/logout:
    post:
      tags:
        - Authentication
      summary: Logout
      responses:
        '200':
          description: Successful Logout (Token Deleted)
          headers:
            Set-Cookie:
              schema:
                type: string
                example: jwt_token=; Max-Age=0; HttpOnly
        '404':
          description: No Token to Delete
  /user/token/existence:
    get:
      tags:
        - Authentication
      summary: Check if Token Exists
      description: Checking if the JWT is stored in the cookie with the name 'jwt_token'
      responses:
        '200':
          description: Token exists
        '404':
          description: Token does not exist
  /user/{userId}/username:
    get:
      tags:
        - User
      summary: Get Username
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Missing or invalid JWT token
    put:
      tags:
        - User
      summary: Update Username
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Missing or invalid JWT token
  /user/{userId}/avatarUrl:
    get:
      tags:
        - User
      summary: Get Avatar URL
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  avatarUrl:
                    type: string
        '401':
          description: Missing or invalid JWT token
    put:
      tags:
        - User
      summary: Update Avatar URL
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                avatarUrl:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  avatarUrl:
                    type: string
        '401':
          description: Missing or invalid JWT token

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
        password:
          type: string
    AuthResponse:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        jwt_token:
          type: string
          nullable: true
          description: |
            If this property is null, the user needs to log in again through the Auth microservice to get a new token.
    Error:
      type: object
      required:
        - message
      properties:
        message:
          type: string